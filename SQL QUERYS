
DROP TABLE IF EXISTS orders;
DROP TABLE IF EXISTS customers;

-- Create customers table
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

-- Create orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10,2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

-- Insert data into customers
INSERT INTO customers (customer_id, name, email) VALUES
(1, 'Alice', 'alice@mail.com'),
(2, 'Bob', 'bob@mail.com'),
(3, 'Charlie', 'charlie@mail.com');

-- Insert data into orders
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(101, 1, '2024-01-05', 250.00),
(102, 2, '2024-01-07', 750.00),
(103, 3, '2024-01-10', 180.00),
(104, 1, '2024-01-15', 550.00);


SELECT * FROM customers;
SELECT * FROM orders;



SELECT AVG(total_amount) AS avg_order_value FROM orders;



-- INNER JOIN
SELECT c.name, o.total_amount
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id;

-- AVG
SELECT AVG(total_amount) AS avg_order_value FROM orders;

---- Subqueries
SELECT name FROM customers
WHERE customer_id IN (
  SELECT customer_id FROM orders WHERE total_amount > 500
);


SELECT customer_id, SUM(total_amount) AS total_spent
FROM orders
GROUP BY customer_id
HAVING total_spent > 1000;



SELECT customers.name, orders.total_amount
FROM customers
INNER JOIN orders ON customers.customer_id = orders.customer_id;


CREATE VIEW high_value_orders AS
SELECT * FROM orders WHERE total_amount > 500;


SELECT * FROM high_value_orders;
